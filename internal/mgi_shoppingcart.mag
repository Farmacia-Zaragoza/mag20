<?php
// ==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--
// Users Magento Class  [V.0.0.1]  (2017-05-11)
// Brqx Group - Agile Farmacia Zaragoza Methodology
// Spc - Cica_d05 - Home - Index_06 - v0_0_1
//-------------------------------------------------------------------------------------
// Manage Magento object - Abstraction for Magento version
//-------------------------------------------------------------------------------------
// ==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--
// Methods:
//addItemtocart($code,$qty) add item to cart with product code & qty
//getAllItemcart() Show all item in shopping cart
//deleteallitemscart() Delete all item in shopping cart
//deletesingleitemcart($pCode) delete single item in cart
//updatecartitem($pCode,$qty) updated cart item
//applycouponcode($couponCode) Apply coupon code to cart
//RemoveCouponcode($couponCode) remove coupon code from cart
//-------------------------------------------------------------------------------------
// - build_data   	  : Build html final code for object 
// ==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--


class mgi_shoppingcart extends mg_print	
{
	public		$n 			=	'mgi_shoppingcart::'			;


    public function __construct ()
   	{   

	}
	//addItemtocart('code2',2)
	public function addItemtocart($code,$qty,$objectManager){
		//$state = $objectManager->get('Magento\Framework\App\State');
		//$state->setAreaCode('frontend');
		$customerSession = $objectManager->create('Magento\Customer\Model\Session');
		$_product = $objectManager->create('Magento\Catalog\Model\Product')->load(1);
		
		$cart = $objectManager->create('Magento\Checkout\Model\Cart');
		//$http = $objectManager->create('Magento\Framework\App\Response\Http');
		$session = $objectManager->get('Magento\Checkout\Model\Session');
		//$productRepository=$objectManager->create('Magento\Catalog\Model\ProductRepository');
		$formKey=$objectManager->create('\Magento\Framework\Data\Form\FormKey');
		$productId =1;
		$params = array(
						'form_key' => $formKey->getFormKey(),
						'product' => $productId, //product Id
						'qty'   =>1 //quantity of product                
					);              
		//Load the product based on productID        
	    $cart->addProduct($_product, $params);
		$cart->save();
	}
	
	public function quoteAddToCart($objectManager,$customerSession)
   {
     echo $customerId = $customerSession->getCustomer()->getId();
      // let's assume product Id is 50
      $product = $objectManager->create('Magento\Catalog\Model\Product')->load(1);
       $params = array(
						'product' => $productId, //product Id
						'qty'   =>1 //quantity of product                
					);  
      $request = new \Magento\Framework\DataObject();
      $request->setData($params);
      // here quote is created for customer
	  
      $quoteId = $objectManager->get('Magento\Quote\Api\CartManagementInterface')->createEmptyCartForCustomer($customerId);
      $quote = $objectManager->get('Magento\Quote\Api\CartRepositoryInterface')->get($quoteId);
      $quote->addProduct($productAddToCart, $request);
      $objectManager->get('Magento\Quote\Api\CartRepositoryInterface')->save($quote);
      $quote->collectTotals();
          
   }
	//getAllItemcart()
	public function getAllItemcart($objectManager){
	// This has to run to authenticate customer and checkout session calls.
	

	$objectManager = \Magento\Framework\App\ObjectManager::getInstance();
	 $cart = $objectManager->get('\Magento\Checkout\Model\Cart'); 

	// retrieve quote items collection
	$itemsCollection = $cart->getQuote()->getItemsCollection();

	// get array of all items what can be display directly
	$itemsVisible = $cart->getQuote()->getAllVisibleItems();

	// retrieve quote items array
	 $items = $cart->getQuote()->getAllItems();

	foreach($items as $item) {
		 echo 'ID: '.$item->getProductId().'<br />';
		  echo 'Name: '.$item->getName().'<br />';
		   echo 'Sku: '.$item->getSku().'<br />';
		   echo 'Quantity: '.$item->getQty().'<br />';
		  echo 'Price: '.$item->getPrice().'<br />';
		echo "<br />";            
	  }



	}
	//deleteallitemscart()
	public function deleteallitemscart($objectManager){
	 $cart = $objectManager->get('\Magento\Checkout\Model\Cart'); 

	// retrieve quote items collection
	$itemsCollection = $cart->getQuote()->getItemsCollection();

	// get array of all items what can be display directly
	$itemsVisible = $cart->getQuote()->getAllVisibleItems();

	// retrieve quote items array
	 $items = $cart->getQuote()->setIsActive(false)->getAllItems();
     //$cart->getQuote()->setIsActive(false);
	foreach($items as $item) {
		$item->delete();           
	  }

	
	}
	
	public function deleteQuoteItems($objectManager){
    //$checkoutSession = $this->getCheckoutSession($objectManager); 
	/*$cart = $objectManager->get('\Magento\Checkout\Model\Cart');
    //$allItems = $cart->getQuote()->getAllVisibleItems();//returns all teh items in session
	$itemsCollection = $cart->getQuote()->getItemsCollection();
	$allItems = $cart->getQuote()->setIsActive(false)->getAllItems();
    foreach ($allItems as $item) {
        //$itemId = $item->getItemId();//item id of particular item
       // $quoteItem=$this->getItemModel($objectManager)->load($itemId);//load particular item which you want to delete by his item id
        $item->delete();//deletes the item
    }*/
	$checkoutSession = $objectManager->get('Magento\Checkout\Model\Session');
	$allItems = $checkoutSession->getQuote()->getAllVisibleItems();
	$cart =  $objectManager->get('Magento\Checkout\Model\Cart');

	if(count($allItems) > 0){
		foreach ($allItems as $item) {
			$itemId = $item->getItemId();//item id of particular item
			$cart->removeItem($itemId)->save();
		}
	}
	 $cartObject = $objectManager->create('Magento\Checkout\Model\Cart')->truncate();
     $cartObject->saveQuote();
	}
	public function getCheckoutSession($objectManage){
		$checkoutSession = $objectManager->get('Magento\Checkout\Model\Session');//checkout session
		return $checkoutSession;
	}
	 
	public function getItemModel($objectManager){
		//$objectManager = \Magento\Framework\App\ObjectManager::getInstance();//instance of object manager
		$itemModel = $objectManager->create('Magento\Quote\Model\Quote\Item');//Quote item model to load quote item
		return $itemModel;
	}
	
	public function deleteQuoteById($objectManager,$quoteId){
		$quote = $objectManager->create('Magento\Quote\Model\Quote')->load($quoteId);
	    $quote->setIsActive(false);
	    $quote->delete();
	}
	
	//deletesingleitemcart
	public function deletesingleitemcart($pCode,$objectManager){
	// This has to run to authenticate customer and checkout session calls.
	$checkoutSession = $objectManager->get('Magento\Checkout\Model\Session');
	$allItems = $checkoutSession->getQuote()->getAllVisibleItems();
	$cart =  $objectManager->get('Magento\Checkout\Model\Cart');

	if(count($allItems) > 0){
		foreach ($allItems as $item) {
			$itemId = $item->getItemId();//item id of particular item
			if($pCode==$item->getProduct()->getSku()){
			$cart->removeItem($itemId)->save();
			}
		}
	}
	}
	
	//updatecartitem('code2',3)
	public function updatecartitem($pCode,$qty,$objectManager){
	$checkoutSession = $objectManager->get('Magento\Checkout\Model\Session');
	$oCart = $checkoutSession->getQuote()->getAllVisibleItems();
	$cart =  $objectManager->get('Magento\Checkout\Model\Cart');
	//echo 'yes i am here';die;
	if( !empty( $oCart ) )
	{
		foreach ( $oCart as $oItem ) 
		{   
		    if($oItem->getProduct()->getSku()==$pCode){
			$oldqty=$oItem->getQty();
			$qtys=$oldqty+$qty;
			$oItem->setQty($qtys)->save();
			}
		}
	}

	
	}
	
	//applycouponcode('Test123')
	public function applycouponcode($couponCode,$objectManager) {
		//echo 'jjjjjjjjjj';
	   $checkoutSession = $objectManager->get('Magento\Checkout\Model\Session');
       $checkoutSession->getQuote()->setCouponCode($couponCode)
                                  ->collectTotals()
                                  ->save();
    }
	
	//RemoveCouponcode('Test123')
	public function RemoveCouponcode($objectManager){
		//$checkoutSession = $objectManager->get('Magento\Checkout\Model\Session');
        //$checkoutSession->getQuote()->setCouponCode('') ->collectTotals()->save();
		$cartQuote = $objectManager->get('Magento\Checkout\Model\Cart')->getQuote();
		  $oldCouponCode = $cartQuote->getCouponCode();
		  echo $codeLength = strlen($oldCouponCode);
		   if($codeLength){     
			 $cartQuote->getShippingAddress()->setCollectShippingRates(true);
			 $cartQuote->setCouponCode('')->collectTotals();//Removing coupon 
			 $objectManager->get('Magento\Quote\Api\CartRepositoryInterface')->save($cartQuote);
		   }

	}
}
 
